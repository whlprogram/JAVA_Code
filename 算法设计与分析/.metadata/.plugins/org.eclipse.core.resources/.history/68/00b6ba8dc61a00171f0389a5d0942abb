package Fibonacci;

import java.io.IOException;
import com.sun.java_cup.internal.runtime.Scanner;
import com.sun.java_cup.internal.runtime.Symbol;

public class Fibonacci {//斐波拉契数列

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
//		  标准输入串System.in
//		  System.in.read()一次只读入一个字节数据，通常要取得一个字符串或一组数字
//		  System.in.read()返回一个整数
//		  必须初始化
		  int n = 0;
		  System.out.print("斐波拉契数列普通递归算法,输入数据：");
		  n = System.in.read();
		  int temp = Fibonacci1(n);
		  System.out.print("斐波拉契数列普通递归算法,得到数据：" + temp);
		  System.out.println();
		  /*在新增一个Scanner对象时需要一个System.in对象，因为实际上还是System.in在取得用户输入。
		   * Scanner的next()方法用以取得用户输入的字符串；
		   * nextInt()将取得的输入字符串转换为整数类型；同样，
		   * nextFloat()转换成浮点型；
		   * nextBoolean()转换成布尔型。*/
		  System.out.print("斐波拉契数列自底向上的非递归算法,输入数据：");
		  Scanner scan = new Scanner(System.in);
		  int n1 = scan.nextInt();
		  System.out.println("斐波拉契数列自底向上的非递归算法,得到数据：" + Fibonacci2(n1));
	}
	public static int Fibonacci1(int n){//普通递归算法
		if(n == 0)
			return 0;
		if(n == 1)
			return 1;
		return Fibonacci1(n-1)+Fibonacci1(n-2);
	}
	public static int Fibonacci2(int n){//自底向上的非递归算法
		int f0 = 0, f1 = 1, f2 = 0;
		if(n == 0)	return f0;
		if(n == 1)	return f1;
		for(int i=2; i<=n; ++i){
			f2 = f0 + f1;
			f0 = f1;
			f1 = f2;
		}
		return f2;
	}

}
